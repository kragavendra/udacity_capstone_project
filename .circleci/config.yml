version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.2.0
  kubernetes: circleci/kubernetes@0.11.1

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install-eksctl:
    description: install eksctl on ubuntu
    steps:
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version

  install-kubectl:
    description: install kubectl
    steps:
      - run:
          name: install kubectl
          command: |
            apt-get update
            apt-get install -y apt-transport-https ca-certificates curl
            curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
            echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
            apt-get update
            apt-get install -y kubectl

  destroy-environment:
    description: Destroy cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws eks update-kubeconfig --name=wordle-cluster
            export KUBECONFIG=/root/.kube/config
            kubectl get svc
            kubectl delete -f deployment/
            eksctl delete cluster wordle-cluster


jobs:
  build-lint:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate 
            make lint

  build-docker-image:
    working_directory: ~/apps
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build and publish docker image
          command: |
            docker build -t wordle .
            echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker tag wordle kragavendra1100/wordle
            docker push kragavendra1100/wordle
      # Here's where you will add some code to rollback on failure  
      - destroy-environment

  create-infrastructure:
    working_directory: ~/apps
    docker:
      - image: 'weaveworks/eksctl:latest'
    steps:
      - checkout
      - install-eksctl
      - install-aws
      - run:
          name: create cluster
          command: |
            aws eks describe-cluster --name wordle-cluster > /dev/null
            if [ $? -eq 0 ]
            then
              echo "Cluster already exists"
            else
              echo "Create Cluster"
              eksctl create cluster --config-file=cluster.yml
            fi 
      # Here's where you will add some code to rollback on failure  
      - destroy-environment

  deploy-app:
    working_directory: ~/apps
    docker:
      - image: 'docker:stable'
    steps:
      - checkout
      - install-kubectl
      - install-aws
      - run:
          name: connect to eks cluster
          command: | 
            aws eks --region us-west-2 update-kubeconfig --name wordle-cluster
            kubectl get svc
      - run: 
          name: deploy app
          command: |
            kubectl apply -f deployment.yml 
      - run:
          name: watch rollout
          command: | 
            kubectl rollout status kragavendra1100/wordle
      - run:
          name: rolling update
          command: |
            kubectl set image kragavendra1100/wordle mycontainer=wordle:latest
      - run:
          name: watch rollout
          command: | 
            kubectl rollout status kragavendra1100/wordle
      # Here's where you will add some code to rollback on failure  
      - destroy-environment

  smoke-test:
    working_directory: ~/apps
    docker:
      - image: 'weaveworks/eksctl:latest'
    steps:
      - checkout
      - install-kubectl
      - install-aws
      - run:
          name: connect to eks cluster
          command: | 
            aws eks --region eu-central-1 update-kubeconfig --name wordle-cluster
            kubectl get svc
      - run:
          name: list kubectl resources
          command: |
            echo "List Deployments:"
            kubectl get deployments
            echo ""
            echo "List Services:"
            kubectl get svc
            echo ""
            echo "List Pods:"
            kubectl get pods
      # Here's where you will add some code to rollback on failure  
      - destroy-environment

workflows:
  default:
    jobs:
      - build-lint
      - build-docker-image:
          requires: [build-lint]
      - create-infrastructure:
          requires: [build-docker-image]
      - deploy-app:
          requires: [create-infrastructure]
      - smoke-test:
          requires: [deploy-app]
