version: 2.1

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Added workflow ID for destroying the environment related files
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # logic to delete blue version
            aws cloudformation delete-stack --stack-name BlueVersion-<< parameters.Workflow_ID >>
            aws s3 rm s3://wordle-random --recursive
            # logic to delete green version
            aws eks update-kubeconfig --name="wordle-${CIRCLE_WORKFLOW_ID:0:7}"
            export KUBECONFIG=/root/.kube/config
            kubectl get svc
            kubectl delete -f deployment/
            eksctl delete cluster wordle-${CIRCLE_WORKFLOW_ID:0:7}


jobs:
  build-lint:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate 
            make lint

  create-blue-version:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "BlueVersion-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure  
      - destroy-environment

  build-docker-image:
    working_directory: ~/apps
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build and publish docker image
          command: |
            docker build -t wordle .
            echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker tag wordle kragavendra1100/wordle
            docker push kragavendra1100/wordle
      # Here's where you will add some code to rollback on failure  
      - destroy-environment

  create-green-cluster:
    executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/install-iam-authenticator:
        release-tag:''
      -run
        name:
        command: |
        # download the eks ctl
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        
        # move the eksctl to bin directory /usr/local/bin
        sudo mv /tmp/eksctl /usr/local/bin
      - aws-eks/create-cluster:
        cluster-name: wordle-${CIRCLE_WORKFLOW_ID:0:7}
        skip-kubectl-install: false
        verbose: 3
        node-type: t2-micro
        nodes-max: 2
        ssh-access: false
        ssh-public-key: ''
      # Here's where you will add some code to rollback on failure  
      - destroy-environment

  deploy-green-cluster:
    executor: aws-eks/python3
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: wordle-${CIRCLE_WORKFLOW_ID:0:7}
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: deployment.yml
          resource-name: deployment/wordle
      # Here's where you will add some code to rollback on failure  
      - destroy-environment





workflows:
  default:
    jobs:
      - build-lint
      - create-blue-version:
          requires: [build-lint]
      - build-docker-image:
          requires: [create-blue-version]
      - create-green-cluster
          requires: [build-docker-image]
      - deploy-green-cluster

